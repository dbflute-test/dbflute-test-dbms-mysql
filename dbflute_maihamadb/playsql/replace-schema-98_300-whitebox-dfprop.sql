

-- =======================================================================================
--                                                                        DBFlute Property
--                                                                        ================
-- /= = = = = = = = = = = = = = = = = = = = = = = =
-- for the test of grouping map for classification
-- = = = = = = = = = =/
create table WHITE_GROUPING_REFERENCE(
    GROUPING_REFERENCE_ID BIGINT AUTO_INCREMENT NOT NULL,
    GROUPING_REFERENCE_CODE CHAR(3) NOT NULL,
    PRIMARY KEY (GROUPING_REFERENCE_ID)
);

-- /= = = = = = = = = = = = = = = = = = = = = = = = = =
-- for the test of implicit conversion foreign key
-- = = = = = = = = = =/
create table WHITE_IMPLICIT_CONV_INTEGER (
	IMPLICIT_CONV_INTEGER_ID INTEGER NOT NULL,
	IMPLICIT_CONV_NUMERIC_ID INTEGER NOT NULL,
	IMPLICIT_CONV_STRING_ID INTEGER NOT NULL,
	IMPLICIT_CONV_NAME VARCHAR(200) NOT NULL,
	PRIMARY KEY (IMPLICIT_CONV_INTEGER_ID)
) ;

create table WHITE_IMPLICIT_CONV_NUMERIC (
	IMPLICIT_CONV_NUMERIC_ID NUMERIC(20, 0) NOT NULL,
	IMPLICIT_CONV_INTEGER_ID NUMERIC(20, 0) NOT NULL,
	IMPLICIT_CONV_STRING_ID NUMERIC(20, 0) NOT NULL,
	IMPLICIT_CONV_NAME VARCHAR(200) NOT NULL,
	PRIMARY KEY (IMPLICIT_CONV_NUMERIC_ID)
) ;

create table WHITE_IMPLICIT_CONV_STRING (
	IMPLICIT_CONV_STRING_ID VARCHAR(10) NOT NULL,
	IMPLICIT_CONV_INTEGER_ID VARCHAR(10) NOT NULL,
	IMPLICIT_CONV_NUMERIC_ID VARCHAR(10) NOT NULL,
	IMPLICIT_CONV_NAME VARCHAR(200) NOT NULL,
	PRIMARY KEY (IMPLICIT_CONV_STRING_ID)
) ;

-- /= = = = = = = = = = = = = = = = = = = = = = = = = =
-- for the test of suppress join/subquery foreign key
-- = = = = = = = = = =/
create table WHITE_SUPPRESS_JOIN_SQ (
	SUPPRESS_JOIN_SQ_ID INTEGER NOT NULL,
	SUPPRESS_JOIN_SQ_NAME VARCHAR(200) NOT NULL,
	PRIMARY KEY (SUPPRESS_JOIN_SQ_ID)
) ;

create table WHITE_SUPPRESS_JOIN_SQ_MANY (
	MANY_ID INTEGER NOT NULL,
	MANY_NAME VARCHAR(200) NOT NULL,
	SUPPRESS_JOIN_SQ_ID INTEGER NOT NULL,
	MANY_ONE_ID INTEGER NOT NULL,
	PRIMARY KEY (MANY_ID)
) ;

create table WHITE_SUPPRESS_JOIN_SQ_MANY_ONE (
	MANY_ONE_ID INTEGER NOT NULL,
	MANY_ONE_NAME VARCHAR(200) NOT NULL,
	MANY_ONE_ONE_ID INTEGER NOT NULL,
	PRIMARY KEY (MANY_ONE_ID)
) ;

create table WHITE_SUPPRESS_JOIN_SQ_MANY_ONE_ONE (
	MANY_ONE_ONE_ID INTEGER NOT NULL,
	MANY_ONE_ONE_NAME VARCHAR(200) NOT NULL,
	PRIMARY KEY (MANY_ONE_ONE_ID)
) ;

create table WHITE_SUPPRESS_JOIN_SQ_ONE (
	ONE_ID INTEGER NOT NULL,
	ONE_NAME VARCHAR(200) NOT NULL,
	SUPPRESS_JOIN_SQ_ID INTEGER NOT NULL,
	ONE_ADDI_ID INTEGER NOT NULL,
	PRIMARY KEY (ONE_ID),
	UNIQUE (SUPPRESS_JOIN_SQ_ID)
) ;

create table WHITE_SUPPRESS_JOIN_SQ_ONE_ADDI (
	ONE_ADDI_ID INTEGER NOT NULL,
	ONE_ADDI_NAME VARCHAR(200) NOT NULL,
	PRIMARY KEY (ONE_ADDI_ID)
) ;

alter table WHITE_SUPPRESS_JOIN_SQ_MANY add constraint FK_WHITE_SUPPRESS_JOIN_SQ_MANY
	foreign key (SUPPRESS_JOIN_SQ_ID) references WHITE_SUPPRESS_JOIN_SQ (SUPPRESS_JOIN_SQ_ID) ;

alter table WHITE_SUPPRESS_JOIN_SQ_MANY add constraint FK_WHITE_SUPPRESS_JOIN_SQ_MANY_ONE
	foreign key (MANY_ONE_ID) references WHITE_SUPPRESS_JOIN_SQ_MANY_ONE (MANY_ONE_ID) ;

alter table WHITE_SUPPRESS_JOIN_SQ_MANY_ONE add constraint FK_WHITE_SUPPRESS_JOIN_SQ_MANY_ONE_ONE
	foreign key (MANY_ONE_ONE_ID) references WHITE_SUPPRESS_JOIN_SQ_MANY_ONE_ONE (MANY_ONE_ONE_ID) ;

alter table WHITE_SUPPRESS_JOIN_SQ_ONE add constraint FK_WHITE_SUPPRESS_JOIN_SQ_ONE
	foreign key (SUPPRESS_JOIN_SQ_ID) references WHITE_SUPPRESS_JOIN_SQ (SUPPRESS_JOIN_SQ_ID) ;

-- /= = = = = = = = = = = = = = = = = = = = =
-- for the test of table except generate-only
-- = = = = = = = = = =/
-- except completely (no getting meta data)
create table WHITE_TABLE_EXCEPT_NOMETA (
	NOMETA_ID NUMERIC(16) NOT NULL PRIMARY KEY,
	NOMETA_NAME VARCHAR(200) NOT NULL
) ;

-- generated referred from generate-only table
create table WHITE_TABLE_EXCEPT_GEN_HEAD (
	GEN_HEAD_ID NUMERIC(16) NOT NULL PRIMARY KEY,
	GEN_HEAD_NAME VARCHAR(200) NOT NULL,
	NOMETA_ID NUMERIC(16)
) ;

alter table WHITE_TABLE_EXCEPT_GEN_HEAD add constraint FK_WHITE_TABLE_EXCEPT_GEN_HEAD_NOMETA
	foreign key (NOMETA_ID) references WHITE_TABLE_EXCEPT_NOMETA (NOMETA_ID) ;

-- except generate-only referring generated table
create table WHITE_TABLE_EXCEPT_GEN_ONLY (
	GEN_ONLY_ID NUMERIC(16) NOT NULL PRIMARY KEY,
	GEN_ONLY_NAME VARCHAR(200) NOT NULL,
	GEN_HEAD_ID NUMERIC(16),
	NOMETA_ID NUMERIC(16)
) ;

alter table WHITE_TABLE_EXCEPT_GEN_ONLY add constraint FK_WHITE_TABLE_EXCEPT_GEN_ONLY_HEAD
	foreign key (GEN_HEAD_ID) references WHITE_TABLE_EXCEPT_GEN_HEAD (GEN_HEAD_ID) ;

alter table WHITE_TABLE_EXCEPT_GEN_ONLY add constraint FK_WHITE_TABLE_EXCEPT_GEN_ONLY_NOMETA
	foreign key (NOMETA_ID) references WHITE_TABLE_EXCEPT_NOMETA (NOMETA_ID) ;

-- generated referring except gen-only
create table WHITE_TABLE_EXCEPT_GEN_REF (
	GEN_REF_ID NUMERIC(16) NOT NULL PRIMARY KEY,
	GEN_REF_NAME VARCHAR(200) NOT NULL,
	GEN_ONLY_ID NUMERIC(16)
) ;

alter table WHITE_TABLE_EXCEPT_GEN_REF add constraint FK_WHITE_TABLE_EXCEPT_GEN_REF_ONLY
	foreign key (GEN_ONLY_ID) references WHITE_TABLE_EXCEPT_GEN_ONLY (GEN_ONLY_ID) ;

-- /= = = = = = = = = = = = = = = = = =
-- for the test of point type-mapping
-- = = = = = = = = = =/
create table WHITE_POINT_TYPE_MAPPING (
	POINT_TYPE_MAPPING_ID NUMERIC(16) NOT NULL,
	POINT_TYPE_MAPPING_MEMBER_NAME VARCHAR(32),
	POINT_TYPE_MAPPING_PRICE_COUNT INTEGER,
	POINT_TYPE_MAPPING_SALE_DATE BIGINT,
	POINT_TYPE_MAPPING_WANTED_DATETIME DATETIME,
	PRIMARY KEY (POINT_TYPE_MAPPING_ID)
) ;

-- /= = = = = = = = = = = = = = = = = = = = = = = =
-- for the test of include query of condition-bean 
-- = = = = = = = = = =/
create table WHITE_INCLUDE_QUERY (
	INCLUDE_QUERY_ID BIGINT AUTO_INCREMENT NOT NULL,
	INCLUDE_QUERY_VARCHAR VARCHAR(100),
	INCLUDE_QUERY_INTEGER INTEGER,
	INCLUDE_QUERY_DATE DATE,
	INCLUDE_QUERY_DATETIME DATETIME,
	PRIMARY KEY (INCLUDE_QUERY_ID)
) ;

-- /= = = = = = = = = = = = = = =
-- for the test of geared cipher 
-- = = = = = = = = = =/
create table WHITE_GEARED_CIPHER (
	CIPHER_ID BIGINT AUTO_INCREMENT NOT NULL,
	CIPHER_INTEGER VARCHAR(100),
	CIPHER_VARCHAR VARCHAR(100),
	CIPHER_DATE VARCHAR(100),
	CIPHER_DATETIME VARCHAR(100),
	PRIMARY KEY (CIPHER_ID)
) ;
